- name: ensure kubernetes-csi directory
  file:
    path: "{{ workspace }}/src/github.com/kubernetes-csi"
    state: directory

- name: get the csi-driver-nfs repository
  git:
    repo: 'https://github.com/kubernetes-csi/csi-driver-nfs'
    dest: "{{ workspace }}/src/github.com/kubernetes-csi/csi-driver-nfs"
    update: no

- name: build csi-driver-nfs plugin image
  command: make container
  args:
    chdir: "{{ workspace }}/src/github.com/kubernetes-csi/csi-driver-nfs"

- name: load (protocol partner) nfs csi node plugin to kind
  command: kind load docker-image --name manila-kube nfsplugin:latest

- name: ensure k8s.io directory
  file:
    path: "{{ workspace }}/src/k8s.io"
    state: directory

- name: get the openstack-cloud-provider repository
  git:
    repo: 'https://github.com/kubernetes/cloud-provider-openstack'
    dest: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"
    update: no

- name: make manila csi plugin image
  command: make image-manila-csi-plugin
  args:
    chdir: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"

- name: get the docker image id
  command: docker images -q k8scloudprovider/manila-csi-plugin\*
  register: result

- debug:
    var: result

- name: tag the local image to match what helm chart will expect
  command: "docker tag {{ result.stdout }} k8scloudprovider/manila-csi-plugin:latest"

- name: load manila csi plugin image to kind image
  command: kind load docker-image --name manila-kube k8scloudprovider/manila-csi-plugin:latest

- name: ensure manifests directory
  file:
    path: "{{ workspace }}/manifests"
    state: directory

- name: copy manifests to target host
  copy:
    src: "{{ item }}"
    dest: "{{ workspace }}/manifests"
    mode: 'u=rw,go=r'
  with_items:
    - nfs-csi-node-plugin-deployment.yaml
    - override-helm-values.yaml

- name: deploy nfs csi node plugin
  command: |
    kubectl apply -f nfs-csi-node-plugin-deployment.yaml
  args:
    chdir: "{{ workspace }}/manifests"

- name: create helm chart for manila-csi plugin
  shell: |
    helm template charts/manila-csi-plugin --name sharedstorage \
      -f "{{ workspace }}/manifests/override-helm-values.yaml" \
      > manila-csi-chart.yaml
  args:
    chdir: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"

- name: deploy manila csi plugin helm chart
  command: kubectl apply -f manila-csi-chart.yaml
  args:
    chdir: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"

- name: clean csi-manila-secrets
  command: kubectl delete secret csi-manila-secrets
  failed_when: false

- name: generate csi-manila-secrets
  shell: |
    #source "{{ workspace }}/Vagrant/adminrc"
    source "{{ workspace }}/Vagrant/demorc"
    cat << YAML | kubectl create -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: csi-manila-secrets
          namespace: default
        stringData:
          os-authURL: "$OS_AUTH_URL"
          os-region: "$OS_REGION_NAME"
          os-userName: "$OS_USERNAME"
          os-password: "$OS_PASSWORD"
          os-projectName: "$OS_PROJECT_NAME"
          os-domainID: "$OS_USER_DOMAIN_ID"
    YAML

- name: clean storage class
  command: kubectl delete storageclass csi-manila-storageclass
  failed_when: false

- name: create storage class
  command: kubectl apply -f examples/manila-csi-plugin/nfs/dynamic-provisioning/storageclass.yaml
  args:
    chdir: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"

- name: wait for snapshot controller to be ready
  shell: |
    timeout 300 bash -c 'while [[ -z $(kubectl api-resources --api-group=snapshot.storage.k8s.io -o=name) ]]; do sleep 1; done'

- name: clean snapshot class
  command: kubectl clean snapshotclass csi-manila-snapshotclass
  failed_when: false

- name: create snapshot class
  command: kubectl apply -f examples/manila-csi-plugin/nfs/snapshot/snapshotclass.yaml
  args:
    chdir: "{{ workspace }}/src/k8s.io/cloud-provider-openstack"


